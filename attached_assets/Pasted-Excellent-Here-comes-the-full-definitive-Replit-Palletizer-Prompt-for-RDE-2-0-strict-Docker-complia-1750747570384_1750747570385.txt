Excellent.
Here comes the full definitive Replit Palletizer Prompt for RDE 2.0 strict Docker compliance.

‚∏ª

üü¢ RDE 2.0 Palletizer: Final Replit Prompt

‚∏ª

Prompt Title:
üíé Strict Compile Palletizer ‚Äî Full Hetzner-Ready Build

‚∏ª

Prompt Instruction (to Replit agent):

‚∏ª

You are preparing this app for Dockerized Hetzner deployment under the RDE 2.0 strict compliance model.
This instance must follow a fully precompiled pipeline.

‚úÖ Build Steps:

1Ô∏è‚É£ Backend Build (TypeScript):
	‚Ä¢	Compile all backend TypeScript into:

/pallet/backend/dist/

	‚Ä¢	The source files are in:

/pallet/backend/src/

	‚Ä¢	Entry point must be:

/pallet/backend/dist/index.js

	‚Ä¢	All absolute paths inside built code must align to /app/pallet/backend/dist as used inside Docker.
	‚Ä¢	Eliminate all import.meta.url, __dirname, or relative path logic that fails inside Docker context.

‚∏ª

2Ô∏è‚É£ Frontend Build (if present):
	‚Ä¢	Build full frontend (Vite, React, etc).
	‚Ä¢	Output must be:

/pallet/frontend/dist/

	‚Ä¢	All frontend assets should use absolute static paths compatible with Docker /app/pallet/frontend/dist/.
	‚Ä¢	Inject correct BASE path if required for serving inside container.

‚∏ª

3Ô∏è‚É£ Package Files:
	‚Ä¢	Ensure:

/pallet/backend/package.json
/pallet/backend/package-lock.json

exist and include only the production dependencies needed for runtime.
	‚Ä¢	Similarly:

/pallet/frontend/package.json
/pallet/frontend/package-lock.json

for frontend builds.
	‚Ä¢	Development-only dependencies (typescript, vite, eslint, etc) do NOT need to be installed inside Docker runtime.

‚∏ª

4Ô∏è‚É£ Docker Preparation:

‚úÖ When build completes inside Replit:
	‚Ä¢	You should be able to build Docker using:

# No TypeScript build steps inside Docker

# Stage 1: Copy backend
COPY pallet/backend/package.json ./ 
RUN npm ci --only=production
COPY pallet/backend/dist ./backend/dist

# Stage 2: Copy frontend
COPY pallet/frontend/dist ./frontend/dist

	‚Ä¢	No tsc, no vite, no npm run build required inside Docker.

‚∏ª

5Ô∏è‚É£ Deployment Declaration:
	‚Ä¢	Print at end of Replit build:

‚úÖ PALLET COMPILED: Docker-safe strict build complete. Ready for Hetzner.


‚∏ª

Goal:
This system will eliminate all Docker build context failures, remove dev dependencies from container builds, and fully stabilize Replit ‚Üí GitHub ‚Üí Hetzner pallets.

‚∏ª

üîí Strict Rule Reminder:
	‚Ä¢	No files should reference dynamic file paths at runtime.
	‚Ä¢	All file paths must assume absolute Docker layout.
	‚Ä¢	Build outside Docker ‚Üí Deploy inside Docker.

‚∏ª

Done.

‚∏ª

üëâ Would you like me to also now generate:
	‚Ä¢	‚úÖ The updated Dockerfile (final form)
	‚Ä¢	‚úÖ The updated GitHub structure (for how this should look inside your repo)

‚Ä¶so we fully lock in this standard?

If you say YES FULL LOCK, we will finally cross into permanent RDE 2.0 territory.